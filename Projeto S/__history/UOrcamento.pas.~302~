unit UOrcamento;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ButtonGroup, Vcl.Menus,
  Data.DB, Vcl.Grids, Vcl.DBGrids, Data.Win.ADODB, Vcl.ExtCtrls,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.VCLUI.Wait, FireDAC.Comp.Client, FireDAC.Phys.PG,
  FireDAC.Phys.PGDef, FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf,
  FireDAC.DApt, FireDAC.Comp.DataSet, Vcl.DBCtrls, Vcl.Mask, Vcl.ComCtrls,
  Vcl.ToolWin, Vcl.DBActns, System.Actions, Vcl.ActnList, System.ImageList,
  Vcl.ImgList;

type
  TFrm_Orcamento = class(TForm)
    DBGrid: TDBGrid;
    Label1: TLabel;
    PanelTop: TPanel;
    PanelCenter: TPanel;
    FDQry_Orcamento: TFDQuery;
    Id_Orc: TDBEdit;
    Data_Orc: TDBEdit;
    Label5: TLabel;
    Label6: TLabel;
    Panel4: TPanel;
    FDQry_OrcamentoItem: TFDQuery;
    Panel1: TPanel;
    Panel2: TPanel;
    Panel5: TPanel;
    DBEDIT_ID: TDBEdit;
    Label7: TLabel;
    CPF: TDBEdit;
    Telefone: TDBEdit;
    DS_OrcamentoItem: TDataSource;
    FDQry_OrcamentoItemcod_orcamento: TIntegerField;
    FDQry_OrcamentoItemid_servico: TIntegerField;
    FDQry_OrcamentoItemquantidade: TIntegerField;
    FDQry_Orcamentocod: TIntegerField;
    FDQry_Orcamentocod_cliente: TIntegerField;
    FDQry_Orcamentodata_orcamento: TSQLTimeStampField;
    FDQry_Orcamentostatus: TIntegerField;
    FDQry_Contratantes: TFDQuery;
    DS_Contratantes: TDataSource;
    DBLookupComboBox1: TDBLookupComboBox;
    ToolBar1: TToolBar;
    Inserir: TToolButton;
    Editar: TToolButton;
    Cancelar: TToolButton;
    Enviar: TToolButton;
    Deletar: TToolButton;
    ToolButton5: TToolButton;
    Primeiro: TToolButton;
    Anterior: TToolButton;
    Proximo: TToolButton;
    Ultimo: TToolButton;
    ImageList1: TImageList;
    ActionList1: TActionList;
    DatasetLast1: TDataSetLast;
    DatasetNext1: TDataSetNext;
    DatasetInsert1: TDataSetInsert;
    DatasetDelete1: TDataSetDelete;
    DatasetEdit1: TDataSetEdit;
    DatasetPost1: TDataSetPost;
    DatasetCancel1: TDataSetCancel;
    DatasetFirst1: TDataSetFirst;
    DatasetRefresh1: TDataSetRefresh;
    DatasetPrior1: TDataSetPrior;
    Panel7: TPanel;
    ToolBar2: TToolBar;
    ToolButton1: TToolButton;
    ToolButton2: TToolButton;
    ToolButton3: TToolButton;
    ToolButton4: TToolButton;
    ToolButton6: TToolButton;
    ToolButton7: TToolButton;
    ToolButton8: TToolButton;
    ToolButton9: TToolButton;
    ToolButton10: TToolButton;
    ToolButton11: TToolButton;
    ActionList2: TActionList;
    DataSetLast2: TDataSetLast;
    DataSetNext2: TDataSetNext;
    DataSetInsert2: TDataSetInsert;
    DataSetDelete2: TDataSetDelete;
    DataSetEdit2: TDataSetEdit;
    DataSetPost2: TDataSetPost;
    DataSetCancel2: TDataSetCancel;
    DataSetFirst2: TDataSetFirst;
    DataSetRefresh2: TDataSetRefresh;
    DataSetPrior2: TDataSetPrior;
    DS_Orcamento: TDataSource;
    FDQry_Contratantescod: TIntegerField;
    FDQry_Contratantesnome: TWideStringField;
    FDQry_Contratantescpf_cnpj: TWideStringField;
    FDQry_Contratantestelefone: TWideStringField;
    FDQry_Servicos: TFDQuery;
    DS_Servicos: TDataSource;
    Label3: TLabel;
    Label4: TLabel;
    FDQry_Servicosid: TIntegerField;
    FDQry_Servicosnome: TWideStringField;
    Panel3: TPanel;
    DBEdit1: TDBEdit;
    Label8: TLabel;
    FDQry_Orcamentocontratantes_nome: TWideStringField;
    FDQry_Orcamentocontratantes_cpf: TWideStringField;
    FDQry_OrcamentoItemvalor_unid: TFloatField;
    FDQry_OrcamentoItemcalc_total_unidade: TFloatField;
    Label2: TLabel;
    FDQry_Orcamentocontratantes_telefone: TWideStringField;
    FDQry_OrcamentoItemservico_nome: TWideStringField;
    FDQry_OrcamentoItemLook_nome_servico: TStringField;
    FDQry_get_preco_serv: TFDQuery;
    FDQry_get_preco_servpreco: TFloatField;
    EditStatus: TEdit;
    ToolBar3: TToolBar;
    BtnMais: TToolButton;
    BtnMenos: TToolButton;
    Panel6: TPanel;
    DBLCB_grupo: TDBLookupComboBox;
    FDQry_Grupo_Serv: TFDQuery;
    DS_Grupo_Serv: TDataSource;
    BtnGrupo: TButton;
    FDQry_Grupo_Servid_grupo_serv: TIntegerField;
    FDQry_Grupo_Servdescricao: TWideStringField;
    FDQry_get_preco_servdata: TSQLTimeStampField;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure FDQry_OrcamentoAfterScroll(DataSet: TDataSet);
    procedure FDQry_OrcamentoItemAfterInsert(DataSet: TDataSet);
    procedure FDQry_OrcamentoAfterInsert(DataSet: TDataSet);
    procedure FDQry_OrcamentoItemCalcFields(DataSet: TDataSet);
    procedure DBLookupComboBox1CloseUp(Sender: TObject);
    procedure FDQry_OrcamentoItemBeforePost(DataSet: TDataSet);
    procedure DS_OrcamentoDataChange(Sender: TObject; Field: TField);
    procedure BtnMaisClick(Sender: TObject);
    procedure BtnMenosClick(Sender: TObject);
    procedure FDQry_OrcamentoBeforePost(DataSet: TDataSet);
    procedure FDQry_OrcamentoAfterEdit(DataSet: TDataSet);
    procedure FDQry_OrcamentoBeforeCancel(DataSet: TDataSet);
    procedure BtnGrupoClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    function GetText (valor:integer):String;
  end;

var
  Frm_Orcamento: TFrm_Orcamento;
  statusnum : integer;

implementation


  uses UDM;

{$R *.dfm}

function TFrm_Orcamento.GetText (valor:integer):String;
begin
  case valor of
    1: result := 'Pendente';
    2: result := 'Aguardando aprovação';
    3: result := 'Aprovado';
    else
      result := 'Sem status';
  end;
end;

procedure TFrm_Orcamento.BtnGrupoClick(Sender: TObject);
var
  QueryServicos, QueryInsert, QryDelete: TFDQuery;
  idGrupoServ: Integer;
  datapreco: TDate;
begin
//Limpeza
  QryDelete := TFDQuery.Create(nil);
  try
    QryDelete.Connection := DM.FDConnection;
    QryDelete.SQL.Text := 'DELETE FROM orcamento_itens WHERE cod_orcamento = :cod_orcamento';
    QryDelete.ParamByName('cod_orcamento').AsInteger := FDQry_Orcamentocod.AsInteger;
    QryDelete.ExecSQL;
  finally
    QryDelete.Free;
  end;

//Inserção
  idGrupoServ := DBLCB_Grupo.KeyValue;
  QueryServicos := TFDQuery.Create(nil);
  try
    QueryServicos.Connection := DM.FDConnection;
    QueryServicos.SQL.Text := 'SELECT id, nome, descricao FROM servicos ' +
                              'WHERE id IN (SELECT id_servico FROM grupo_serv_servicos WHERE id_grupo_servico = :idGrupoServ)';
    QueryServicos.ParamByName('idGrupoServ').AsInteger := idGrupoServ;
    QueryServicos.Open;
    QueryInsert := TFDQuery.Create(nil);
    try
      QueryInsert.Connection := DM.FDConnection;
      QueryInsert.SQL.Text := 'INSERT INTO orcamento_itens (cod_orcamento, id_servico, quantidade, valor_unid) ' +
                          'VALUES (:cod_orcamento, :id_servico, :quantidade, :valor_unid)';
    while not QueryServicos.Eof do
      begin
      QueryInsert.ParamByName('cod_orcamento').AsInteger := FDQry_Orcamentocod.AsInteger;
      QueryInsert.ParamByName('id_servico').AsInteger := QueryServicos.FieldByName('id').AsInteger;
      FDQry_get_preco_serv.Close;
      FDQry_get_preco_serv.ParamByName('id_servico').AsInteger := QueryServicos.FieldByName('id').AsInteger;
      datapreco := QuotedStr(FDQry_Orcamento.FieldByName('data_orcamento').AsString);
      FDQry_get_preco_serv.ParamByName('data_orcamento').AsDate := datapreco;
      FDQry_get_preco_serv.Open;
      QueryInsert.ParamByName('valor_unid').AsFloat := FDQry_get_preco_servpreco.AsFloat;
      QueryInsert.ParamByName('quantidade').AsInteger := 1;
      QueryInsert.ExecSQL;
      FDQry_OrcamentoItem.Refresh;
      QueryServicos.Next;
       end;
      finally
      QueryInsert.Free;
    end;
    finally
    QueryServicos.Free;
  end;
end;

procedure TFrm_Orcamento.BtnMaisClick(Sender: TObject);
var
  status : integer;
begin
if (statusnum <= -1) then
    raise Exception.Create('Sem status definido')
  else
  Dec(statusnum);
  EditStatus.Text := Frm_Orcamento.GetText(statusnum);
end;

procedure TFrm_Orcamento.BtnMenosClick(Sender: TObject);
begin
   if (statusnum > 3) then
    raise Exception.Create('Sem status definido')
  else
  begin
    Inc(statusnum);
    EditStatus.Text := Frm_Orcamento.GetText(statusnum)
  end;
end;

procedure TFrm_Orcamento.DBLookupComboBox1CloseUp(Sender: TObject);
begin
  FDQry_Orcamentocod_cliente.AsInteger := FDQry_Contratantescod.AsInteger;
  FDQry_Orcamentocontratantes_nome.AsString := FDQry_Contratantesnome.AsString;
  FDQry_Orcamentocontratantes_cpf.AsString :=  FDQry_Contratantescpf_cnpj.AsString;
  FDQry_Orcamentocontratantes_telefone.AsString := FDQry_Contratantestelefone.AsString;
end;

procedure TFrm_Orcamento.DS_OrcamentoDataChange(Sender: TObject; Field: TField);
begin
  EditStatus.Text := Frm_Orcamento.GetText(FDQry_Orcamentostatus.AsInteger);
end;

procedure TFrm_Orcamento.FDQry_OrcamentoAfterEdit(DataSet: TDataSet);
begin
  BtnMais.enabled := true;
  BtnMenos.enabled := true;
end;

procedure TFrm_Orcamento.FDQry_OrcamentoAfterInsert(DataSet: TDataSet);
var
  resultado: Integer;
begin
  FDQry_Orcamentodata_orcamento.AsDatetime := now;
  resultado := DM.RetornaContador('orcamentos', 'cod');
  FDQry_Orcamentocod.AsInteger:= resultado;
  Id_Orc.Text := IntToStr(resultado);
  FDQry_Orcamentostatus.AsInteger := 1;
end;

procedure TFrm_Orcamento.FDQry_OrcamentoAfterScroll(DataSet: TDataSet);
begin
  FDQry_OrcamentoItem.close;
  FDQry_OrcamentoItem.parambyname('cod_orcamento').AsInteger :=FDQry_Orcamentocod.AsInteger;
  FDQry_OrcamentoItem.open;
end;

procedure TFrm_Orcamento.FDQry_OrcamentoBeforeCancel(DataSet: TDataSet);
begin
  BtnMais.enabled := false;
  BtnMenos.enabled := false;
end;

procedure TFrm_Orcamento.FDQry_OrcamentoBeforePost(DataSet: TDataSet);
begin
  FDQry_Orcamentostatus.AsInteger := statusnum;
end;

procedure TFrm_Orcamento.FDQry_OrcamentoItemAfterInsert(DataSet: TDataSet);
begin
  if FDQry_Orcamentocod.AsString <> '' then
     FDQry_OrcamentoItemcod_orcamento.AsInteger := FDQry_Orcamentocod.AsInteger;
     FDQry_OrcamentoItemquantidade.AsInteger := 1;
end;

procedure TFrm_Orcamento.FDQry_OrcamentoItemBeforePost(DataSet: TDataSet);
  function Retorno_preco(id_servico :integer; data:Tdatetime):real;
  begin
    result := 0;
    FDQry_get_preco_serv.Close;
    FDQry_get_preco_serv.ParamByName('id_servico').AsInteger := id_servico;
    FDQry_get_preco_serv.ParamByName('data_orcamento').asdatetime := data;
    FDQry_get_preco_serv.open;
    if not FDQry_get_preco_serv.isempty then
      result := FDQry_get_preco_servpreco.AsFloat;
  end;
begin
  if FDQry_OrcamentoItem.State in [dsEdit,dsInsert] then
    FDQry_OrcamentoItemvalor_unid.AsFloat := Retorno_preco(FDQry_OrcamentoItem.FieldByName('id_servico').asinteger, FDQry_Orcamentodata_orcamento.AsDatetime);
end;

procedure TFrm_Orcamento.FDQry_OrcamentoItemCalcFields(DataSet: TDataSet);
begin
  FDQry_OrcamentoItemcalc_total_unidade.asfloat :=
  FDQry_OrcamentoItemquantidade.AsFloat * FDQry_OrcamentoItemvalor_unid.AsFloat;
end;

procedure TFrm_Orcamento.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  action := cafree;
  Frm_Orcamento:= nil;
end;

procedure TFrm_Orcamento.FormCreate(Sender: TObject);
begin
  FDQry_Orcamento.Open;
  FDQry_OrcamentoItem.Open;
  FDQry_Contratantes.Open;
  FDQry_Servicos.Open;
  FDQry_Grupo_Serv.Open;
  FDQry_get_preco_serv.Open;
  EditStatus.Text := Frm_Orcamento.GetText(FDQry_Orcamentostatus.AsInteger);
  statusnum := FDQry_Orcamentostatus.AsInteger;
end;

end.
