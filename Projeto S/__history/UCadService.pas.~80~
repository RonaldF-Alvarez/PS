unit UCadService;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, UCadPadrao, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt,
  Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client, Vcl.DBCtrls, Vcl.StdCtrls,
  Vcl.Mask, Vcl.ExtCtrls, Vcl.Buttons, Vcl.ComCtrls, System.ImageList,
  Vcl.ImgList, Vcl.ToolWin, Vcl.ActnMan, Vcl.ActnCtrls, Vcl.DBActns,
  System.Actions, Vcl.ActnList, Vcl.Grids, Vcl.DBGrids;

type
  TFrm_CadService = class(TFrm_Padrao)
    FDQry_Cadastroid: TIntegerField;
    FDQry_Cadastronome: TWideStringField;
    FDQry_Cadastrodescricao: TWideStringField;
    Label2: TLabel;
    Label3: TLabel;
    FDQry_Valores: TFDQuery;
    Label5: TLabel;
    DBEdit1: TDBEdit;
    DBEdit2: TDBEdit;
    DBEdit3: TDBEdit;
    Panel5: TPanel;
    DBGrid1: TDBGrid;
    DS_Valores: TDataSource;
    ActionList2: TActionList;
    DataSetFirst2: TDataSetFirst;
    DataSetPrior2: TDataSetPrior;
    DataSetNext2: TDataSetNext;
    DataSetLast2: TDataSetLast;
    DataSetInsert2: TDataSetInsert;
    DataSetDelete2: TDataSetDelete;
    DataSetEdit2: TDataSetEdit;
    DataSetPost2: TDataSetPost;
    DataSetCancel2: TDataSetCancel;
    DataSetRefresh2: TDataSetRefresh;
    ToolBar2: TToolBar;
    ToolButton11: TToolButton;
    ToolButton12: TToolButton;
    ToolButton13: TToolButton;
    ToolButton14: TToolButton;
    ToolButton15: TToolButton;
    ToolButton16: TToolButton;
    ToolButton17: TToolButton;
    ToolButton18: TToolButton;
    ToolButton19: TToolButton;
    ToolButton20: TToolButton;
    FDQry_Valoresid: TIntegerField;
    FDQry_Valoresid_servico: TIntegerField;
    FDQry_Valorespreco: TFloatField;
    FDQry_Valoresdata: TSQLTimeStampField;
    DataSource1: TDataSource;
    FDQry_Valoresab: TFDQuery;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure DS_CadContDataChange(Sender: TObject; Field: TField);
    procedure FDQry_ValoresAfterInsert(DataSet: TDataSet);
    procedure FDQry_ValoresBeforePost(DataSet: TDataSet);
    procedure FDQry_CadastroAfterPost(DataSet: TDataSet);
    procedure FormCreate(Sender: TObject);
    procedure DS_CadDataChange(Sender: TObject; Field: TField);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frm_CadService: TFrm_CadService;

implementation

{$R *.dfm}

uses UDM;

procedure TFrm_CadService.DS_CadContDataChange(Sender: TObject; Field: TField);
  var
  id_servico : integer;
begin
  inherited;
  id_servico := 0;
  if FDQry_Cadastroid.AsString <> '' then
    id_servico := FDQry_Cadastroid.asInteger;

  FDQry_Valores.Close;
  FDQry_Valores.ParamByName('id_servico').asInteger := id_servico;
  FDQry_Valores.open;
end;

procedure TFrm_CadService.DS_CadDataChange(Sender: TObject; Field: TField);
  var
  id_servico : integer;
begin
  inherited;
  id_servico := 0;
  if FDQry_Cadastroid.AsString <> '' then
    id_servico := FDQry_Cadastroid.asInteger;

  FDQry_Valores.Close;
  FDQry_Valores.ParamByName('id_servico').asInteger := id_servico;
  FDQry_Valores.open;
end;

procedure TFrm_CadService.FDQry_CadastroAfterPost(DataSet: TDataSet);
begin
  inherited;
  FDQry_Cadastro.Refresh;
end;

procedure TFrm_CadService.FDQry_ValoresAfterInsert(DataSet: TDataSet);
begin
  inherited;
  FDQry_Valoresid_servico.AsInteger := FDQry_Cadastroid.AsInteger;
  FDQry_Valoresdata.AsDatetime := now;

end;

procedure TFrm_CadService.FDQry_ValoresBeforePost(DataSet: TDataSet);
begin
  inherited;
  if FDQry_Valorespreco.AsFloat <= 0  then
     raise Exception.Create('Necessário informar o Preço');

end;

procedure TFrm_CadService.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  inherited;
  action := cafree;
  Frm_CadService:= nil;
end;

procedure TFrm_CadService.FormCreate(Sender: TObject);
begin
  inherited;
  DS_CadContDataChange(nil, nil);
end;

end.
